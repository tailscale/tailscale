// Copyright (c) Tailscale Inc & AUTHORS
// SPDX-License-Identifier: BSD-3-Clause

// Code generated by tailscale.com/cmd/cloner; DO NOT EDIT.

package netmap

import (
	"maps"
	"time"

	"tailscale.com/tailcfg"
	"tailscale.com/tka"
	"tailscale.com/types/key"
	"tailscale.com/types/views"
	"tailscale.com/util/set"
	"tailscale.com/wgengine/filter/filtertype"
)

// Clone makes a deep copy of NetworkMap.
// The result aliases no memory with the original.
func (src *NetworkMap) Clone() *NetworkMap {
	if src == nil {
		return nil
	}
	dst := new(NetworkMap)
	*dst = *src
	dst.SelfNode = src.SelfNode
	dst.AllCaps = maps.Clone(src.AllCaps)
	if src.Peers != nil {
		dst.Peers = make([]tailcfg.NodeView, len(src.Peers))
		for i := range dst.Peers {
			dst.Peers[i] = src.Peers[i]
		}
	}
	dst.DNS = *src.DNS.Clone()
	if src.PacketFilter != nil {
		dst.PacketFilter = make([]filtertype.Match, len(src.PacketFilter))
		for i := range dst.PacketFilter {
			dst.PacketFilter[i] = *src.PacketFilter[i].Clone()
		}
	}
	dst.PacketFilterRules = src.PacketFilterRules
	dst.SSHPolicy = src.SSHPolicy.Clone()
	dst.DERPMap = src.DERPMap.Clone()
	dst.ControlHealth = append(src.ControlHealth[:0:0], src.ControlHealth...)
	dst.UserProfiles = maps.Clone(src.UserProfiles)
	return dst
}

// A compilation failure here means this code must be regenerated, with the command at the top of this file.
var _NetworkMapCloneNeedsRegeneration = NetworkMap(struct {
	SelfNode          tailcfg.NodeView
	AllCaps           set.Set[tailcfg.NodeCapability]
	NodeKey           key.NodePublic
	PrivateKey        key.NodePrivate
	Expiry            time.Time
	Name              string
	MachineKey        key.MachinePublic
	Peers             []tailcfg.NodeView
	DNS               tailcfg.DNSConfig
	PacketFilter      []filtertype.Match
	PacketFilterRules views.Slice[tailcfg.FilterRule]
	SSHPolicy         *tailcfg.SSHPolicy
	CollectServices   bool
	DERPMap           *tailcfg.DERPMap
	ControlHealth     []string
	TKAEnabled        bool
	TKAHead           tka.AUMHash
	Domain            string
	DomainAuditLogID  string
	UserProfiles      map[tailcfg.UserID]tailcfg.UserProfileView
}{})
